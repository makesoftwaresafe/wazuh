@startuml db_class

package "fimCommonDefs" <<Folder>> #DDDDDD{
    interface callbacks{
        void((*fim_sync_callback_t)(const char *, const char*));
        void((*logging_callback_t)(const modules_log_level_t, const char*));
        void((*callback_t)(void *, void *));
    }
    enum FIMDBErrorCode {
        FIMDB_OK = 0,
        FIMDB_ERR = -1,
        FIMDB_FULL = -2
    }
    interface callback_context_t <<(S,#FF7700) struct>>{
        callback_t,
        void*
    }
}
package "item" <<Folder>> {
    abstract DBItem {
        # string m_identifier
        # bool m_scanned
        # time_t m_lastEvent
        # string m_checksum
        # enum m_mode

        + DBItem()
        + ~DBItem()
        + {abstract} fim_entry toFimEntry()
        + {abstract} nlohman::json toJson()
        + bool state()
    }

    class FileItem {
        - unsigned int m_size
        - string m_perm
        - string m_attributes
        - int m_uid
        - string m_username
        - int m_gid
        - string m_groupname
        - time_t m_time
        - unsigned long long int m_inode
        - string m_md5
        - string m_sha1
        - string m_sha256
        - unsigned long int m_dev
        - int m_options
        - unique_ptr<fim_entry> m_fimEntry
        - unique_ptr<nlohman::json> m_statementConf

        + FileItem(fim_entry)
        + FileItem(nlohman::json)
        + ~FileItem()
        + fim_entry* toFIMEntry()
        + nlohman::json* toJsonEntry()
    }
    class "RegistryValue" {
        - int m_type
        - int m_keyUid
        - int m_size
        - string m_path
        - string m_md5
        - string m_sha1
        - string m_sha256
        - unique_ptr<fim_entry> m_fimEntry
        - unique_ptr<nlohman::json> m_statementConf

        + RegistryValue(fim_entry)
        + RegistryValue(nlohman::json)
        + ~RegistryValue()
        + fim_entry toFIMEntry()
        + json toJson()
    }
    class "RegistryKey" {
        - string m_perm
        - int m_uid
        - string m_username
        - int m_gid
        - string m_groupname
        - time_t m_time
        - int m_arch
        - unique_ptr<fim_entry> m_fimEntry
        - unique_ptr<nlohman::json> m_statementConf

        + RegistryKey(fim_entry)
        + RegistryKey(nlohman::json)
        + ~RegistryKey()
        + fim_entry toFIMEntry()
        + json to_Json()
    }
    DBItem <|-- FileItem
    DBItem <|-- RegistryValue
    DBItem <|-- RegistryKey
}
class "FimDB"  <<(S,#FF7700) Singleton>> {
    - int m_fileLimit
    - int m_registryLimit
    - int m_syncInterval
    - bool m_stopping
    - mutex m_fimSyncMutex
    - condition_variable m_cv
    - shared_ptr<DBSync> m_dbsyncHandler
    - shared_ptr<RSync> m_rsyncHandler
    - function<void(const std::string&)> m_syncFileMessageFunction
    - function<void(const std::string&)> m_syncRegistryMessageFunction
    - function<void(modules_log_level_t, const string&)> m_loggingFunction
    - bool m_runIntegrity
    - thread m_integrityThread
    - void sync()

    # FIMDB()
    # ~FIMDB()
    # FIMDB(const FIMDB&)
    # void setFileLimit()
    # void setRegistryLimit()
    # void setValueLimit()

    + void init(unsigned int,
                function<void(const string&)>,
                function<void(const string&)>,
                function<void(modules_log_level_t, const string&)>,
                shared_ptr<DBSync>,
                shared_ptr<RemoteSync>,
                unsigned int,
                unsigned int,
                bool)
    + void registerRsync()
    + void pushMessage(const string&)
    + void runIntegrity()
    + void stopSync()
    + void stopIntegrity()
    + void logFunction(const modules_log_level_t, const string&)
    + DBSYNC_HANDLE DBSyncHandle()
    + void loopRsync()
    + void removeItem(json)
    + void updateItem(json, callback)
    + void executeQuery(json, callback)
    + void teardown()
    + FimDB instance()
}
package "db.hpp" <<Folder>> #DDDDDD{
    class DB <<(S,#FF7700) Singleton>>{
        - DB()
        - ~DB()
        - DB(const DB&)
        - DB& operation=(const DB&)
        - string CreateStatement

        + static DB& instance()
        + void init(const int, const int, std::function<void(const std::string&)>, std::function<void(const std::string&)>, std::function<void(modules_log_level_t, const std::string&)>, int, int, bool)
        + void runIntegrity()
        + void pushMessage(const string&)
        + DBSYNC_HANDLE DBSyncHandle()
        + void removeFile(const std::string&)
        + void getFile(const string&, std::function<void(const nlohmann::json&)>)
        + int countFiles(const COUNT_SELECT_TYPE)
        + bool updateFile(const nlohmann::json &)
        + void searchFile(const SearchData&, std::function<void(const std::string &)>)
        + void teardown()
    }
    interface SearchData{
        tuple<FILE_SEARCH_TYPE, std::string, std::string, std::string>
    }
    enum COUNT_SELECT_TYPE {
        COUNT_ALL,
        COUNT_INODE
    }
    enum FILE_SEARCH_TYPE {
        SEARCH_TYPE_PATH,
        SEARCH_TYPE_INODE
    }
    DB *-- SearchData
    DB *-- COUNT_SELECT_TYPE
    DB *-- FILE_SEARCH_TYPE
}
package "db.h" <<Folder>> #DDDDDD{
    interface db {
        void fim_db_init(int, int, fim_sync_callback_t, logging_callback_t, int, uint32_t int,bool)
        void fim_run_integrity()
        void fim_sync_push_msg(const char*)
        TXN_HANDLE fim_db_transaction_start(const char*, result_callback_t, void*)
        FIMDBErrorCode fim_db_transaction_sync_row(TXN_HANDLE, const fim_entry*)
        FIMDBErrorCode fim_db_transaction_deleted_rows(TXN_HANDLE, result_callback_t, void*)
        void fim_db_teardown()
    }
    interface file {
        FIMDBErrorCode fim_db_file_pattern_search(const char*, callback_context_t )
        FIMDBErrorCode fim_db_get_path(const char*, callback_context_t)
        FIMDBErrorCode fim_db_remove_path(const char*)
        int fim_db_get_count_file_inode()
        int fim_db_get_count_file_entry()
        FIMDBErrorCode fim_db_file_update(const fim_entry*, bool*)
        FIMDBErrorCode fim_db_file_inode_search(const unsigned long, const unsigned long, callback_context_t)
    }
}

circle FIM
db.h => FIM
fimCommonDefs => FIM
db.h *-- db.hpp
db.h *-- FimDB
fimCommonDefs --o db.h
fimCommonDefs --o item
fimCommonDefs --o FimDB
@enduml
